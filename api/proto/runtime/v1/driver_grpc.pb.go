// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/runtime/v1/driver.proto

package runtimev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RuntimeDriver_Execute_FullMethodName  = "/runtime.v1.RuntimeDriver/Execute"
	RuntimeDriver_Discover_FullMethodName = "/runtime.v1.RuntimeDriver/Discover"
)

// RuntimeDriverClient is the client API for RuntimeDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RuntimeDriver exposes execution and discovery for a runtime driver.
type RuntimeDriverClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteReply, error)
	Discover(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Capabilities, error)
}

type runtimeDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeDriverClient(cc grpc.ClientConnInterface) RuntimeDriverClient {
	return &runtimeDriverClient{cc}
}

func (c *runtimeDriverClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteReply)
	err := c.cc.Invoke(ctx, RuntimeDriver_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeDriverClient) Discover(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Capabilities, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Capabilities)
	err := c.cc.Invoke(ctx, RuntimeDriver_Discover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeDriverServer is the server API for RuntimeDriver service.
// All implementations must embed UnimplementedRuntimeDriverServer
// for forward compatibility.
//
// RuntimeDriver exposes execution and discovery for a runtime driver.
type RuntimeDriverServer interface {
	Execute(context.Context, *ExecuteRequest) (*ExecuteReply, error)
	Discover(context.Context, *emptypb.Empty) (*Capabilities, error)
	mustEmbedUnimplementedRuntimeDriverServer()
}

// UnimplementedRuntimeDriverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRuntimeDriverServer struct{}

func (UnimplementedRuntimeDriverServer) Execute(context.Context, *ExecuteRequest) (*ExecuteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedRuntimeDriverServer) Discover(context.Context, *emptypb.Empty) (*Capabilities, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedRuntimeDriverServer) mustEmbedUnimplementedRuntimeDriverServer() {}
func (UnimplementedRuntimeDriverServer) testEmbeddedByValue()                       {}

// UnsafeRuntimeDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeDriverServer will
// result in compilation errors.
type UnsafeRuntimeDriverServer interface {
	mustEmbedUnimplementedRuntimeDriverServer()
}

func RegisterRuntimeDriverServer(s grpc.ServiceRegistrar, srv RuntimeDriverServer) {
	// If the following call pancis, it indicates UnimplementedRuntimeDriverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RuntimeDriver_ServiceDesc, srv)
}

func _RuntimeDriver_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeDriverServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeDriver_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeDriverServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeDriver_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeDriverServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeDriver_Discover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeDriverServer).Discover(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeDriver_ServiceDesc is the grpc.ServiceDesc for RuntimeDriver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeDriver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.v1.RuntimeDriver",
	HandlerType: (*RuntimeDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _RuntimeDriver_Execute_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _RuntimeDriver_Discover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/runtime/v1/driver.proto",
}
